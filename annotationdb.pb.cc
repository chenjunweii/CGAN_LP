// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: annotationdb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "annotationdb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace annotationdb {

namespace {

const ::google::protobuf::Descriptor* proposal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proposal_reflection_ = NULL;
const ::google::protobuf::Descriptor* image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  image_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_annotationdb_2eproto() {
  protobuf_AddDesc_annotationdb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "annotationdb.proto");
  GOOGLE_CHECK(file != NULL);
  proposal_descriptor_ = file->message_type(0);
  static const int proposal_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proposal, xmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proposal, ymin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proposal, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proposal, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proposal, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proposal, entry_),
  };
  proposal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proposal_descriptor_,
      proposal::default_instance_,
      proposal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proposal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proposal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proposal));
  image_descriptor_ = file->message_type(1);
  static const int image_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image, entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image, object_),
  };
  image_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      image_descriptor_,
      image::default_instance_,
      image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(image));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_annotationdb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proposal_descriptor_, &proposal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    image_descriptor_, &image::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_annotationdb_2eproto() {
  delete proposal::default_instance_;
  delete proposal_reflection_;
  delete image::default_instance_;
  delete image_reflection_;
}

void protobuf_AddDesc_annotationdb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022annotationdb.proto\022\014annotationdb\"V\n\010pr"
    "oposal\022\014\n\004xmin\030\001 \002(\005\022\014\n\004ymin\030\002 \002(\005\022\t\n\001w\030"
    "\003 \002(\005\022\t\n\001h\030\004 \002(\005\022\t\n\001c\030\005 \002(\t\022\r\n\005entry\030\006 \002"
    "(\t\"&\n\005image\022\r\n\005entry\030\001 \002(\t\022\016\n\006object\030\002 \003"
    "(\t", 162);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "annotationdb.proto", &protobuf_RegisterTypes);
  proposal::default_instance_ = new proposal();
  image::default_instance_ = new image();
  proposal::default_instance_->InitAsDefaultInstance();
  image::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_annotationdb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_annotationdb_2eproto {
  StaticDescriptorInitializer_annotationdb_2eproto() {
    protobuf_AddDesc_annotationdb_2eproto();
  }
} static_descriptor_initializer_annotationdb_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int proposal::kXminFieldNumber;
const int proposal::kYminFieldNumber;
const int proposal::kWFieldNumber;
const int proposal::kHFieldNumber;
const int proposal::kCFieldNumber;
const int proposal::kEntryFieldNumber;
#endif  // !_MSC_VER

proposal::proposal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proposal::InitAsDefaultInstance() {
}

proposal::proposal(const proposal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proposal::SharedCtor() {
  _cached_size_ = 0;
  xmin_ = 0;
  ymin_ = 0;
  w_ = 0;
  h_ = 0;
  c_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entry_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proposal::~proposal() {
  SharedDtor();
}

void proposal::SharedDtor() {
  if (c_ != &::google::protobuf::internal::kEmptyString) {
    delete c_;
  }
  if (entry_ != &::google::protobuf::internal::kEmptyString) {
    delete entry_;
  }
  if (this != default_instance_) {
  }
}

void proposal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proposal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proposal_descriptor_;
}

const proposal& proposal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_annotationdb_2eproto();
  return *default_instance_;
}

proposal* proposal::default_instance_ = NULL;

proposal* proposal::New() const {
  return new proposal;
}

void proposal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xmin_ = 0;
    ymin_ = 0;
    w_ = 0;
    h_ = 0;
    if (has_c()) {
      if (c_ != &::google::protobuf::internal::kEmptyString) {
        c_->clear();
      }
    }
    if (has_entry()) {
      if (entry_ != &::google::protobuf::internal::kEmptyString) {
        entry_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proposal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 xmin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xmin_)));
          set_has_xmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ymin;
        break;
      }

      // required int32 ymin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ymin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ymin_)));
          set_has_ymin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_w;
        break;
      }

      // required int32 w = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_h;
        break;
      }

      // required int32 h = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_c;
        break;
      }

      // required string c = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_c:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_c()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->c().data(), this->c().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_entry;
        break;
      }

      // required string entry = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entry().data(), this->entry().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proposal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 xmin = 1;
  if (has_xmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->xmin(), output);
  }

  // required int32 ymin = 2;
  if (has_ymin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ymin(), output);
  }

  // required int32 w = 3;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->w(), output);
  }

  // required int32 h = 4;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->h(), output);
  }

  // required string c = 5;
  if (has_c()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->c().data(), this->c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->c(), output);
  }

  // required string entry = 6;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry().data(), this->entry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->entry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proposal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 xmin = 1;
  if (has_xmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->xmin(), target);
  }

  // required int32 ymin = 2;
  if (has_ymin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ymin(), target);
  }

  // required int32 w = 3;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->w(), target);
  }

  // required int32 h = 4;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->h(), target);
  }

  // required string c = 5;
  if (has_c()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->c().data(), this->c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->c(), target);
  }

  // required string entry = 6;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry().data(), this->entry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->entry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proposal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 xmin = 1;
    if (has_xmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xmin());
    }

    // required int32 ymin = 2;
    if (has_ymin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ymin());
    }

    // required int32 w = 3;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // required int32 h = 4;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

    // required string c = 5;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->c());
    }

    // required string entry = 6;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proposal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proposal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proposal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proposal::MergeFrom(const proposal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xmin()) {
      set_xmin(from.xmin());
    }
    if (from.has_ymin()) {
      set_ymin(from.ymin());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
    if (from.has_entry()) {
      set_entry(from.entry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proposal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proposal::CopyFrom(const proposal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proposal::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void proposal::Swap(proposal* other) {
  if (other != this) {
    std::swap(xmin_, other->xmin_);
    std::swap(ymin_, other->ymin_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(c_, other->c_);
    std::swap(entry_, other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proposal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proposal_descriptor_;
  metadata.reflection = proposal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int image::kEntryFieldNumber;
const int image::kObjectFieldNumber;
#endif  // !_MSC_VER

image::image()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void image::InitAsDefaultInstance() {
}

image::image(const image& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void image::SharedCtor() {
  _cached_size_ = 0;
  entry_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

image::~image() {
  SharedDtor();
}

void image::SharedDtor() {
  if (entry_ != &::google::protobuf::internal::kEmptyString) {
    delete entry_;
  }
  if (this != default_instance_) {
  }
}

void image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return image_descriptor_;
}

const image& image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_annotationdb_2eproto();
  return *default_instance_;
}

image* image::default_instance_ = NULL;

image* image::New() const {
  return new image;
}

void image::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_entry()) {
      if (entry_ != &::google::protobuf::internal::kEmptyString) {
        entry_->clear();
      }
    }
  }
  object_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string entry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entry().data(), this->entry().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object;
        break;
      }

      // repeated string object = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_object()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->object(this->object_size() - 1).data(),
            this->object(this->object_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string entry = 1;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry().data(), this->entry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->entry(), output);
  }

  // repeated string object = 2;
  for (int i = 0; i < this->object_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->object(i).data(), this->object(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->object(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string entry = 1;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry().data(), this->entry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->entry(), target);
  }

  // repeated string object = 2;
  for (int i = 0; i < this->object_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object(i).data(), this->object(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->object(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int image::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string entry = 1;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entry());
    }

  }
  // repeated string object = 2;
  total_size += 1 * this->object_size();
  for (int i = 0; i < this->object_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->object(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void image::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const image* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const image*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void image::MergeFrom(const image& from) {
  GOOGLE_CHECK_NE(&from, this);
  object_.MergeFrom(from.object_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entry()) {
      set_entry(from.entry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void image::CopyFrom(const image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool image::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void image::Swap(image* other) {
  if (other != this) {
    std::swap(entry_, other->entry_);
    object_.Swap(&other->object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = image_descriptor_;
  metadata.reflection = image_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace annotationdb

// @@protoc_insertion_point(global_scope)
